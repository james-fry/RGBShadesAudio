//   Graphical effects to run on the RGB Shades LED array
//   Each function should have the following components:
//    * Must be declared void with no parameters or will break function pointer array
//    * Check effectInit, if false then init any required settings and set effectInit true
//    * Set effectDelay (the time in milliseconds until the next run of this effect)
//    * All animation should be controlled with counters and effectDelay, no delay() or loops
//    * Pixel data should be written using leds[XY(x,y)] to map coordinates to the RGB Shades layout

void torch() {
  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 5;
    fadingActive = true;
  }

  injectRandom();
  calcNextEnergy();
  calcNextColors();
  return 1;
}

// RotatingPlasma
void radiate() {
  static byte offset  = 0; // counter for radial color wave motion
  static int plasVector = 0; // counter for orbiting plasma center

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    selectRandomPalette();
    fadingActive = true;
  }
  // Calculate current center of plasma pattern (can be offscreen)
  //int xOffset = (cos8(plasVector)-127)/2;
  //int yOffset = (sin8(plasVector)-127)/2;

  int xOffset = 0;
  int yOffset = 4;

  // Draw one frame of the animation into the LED array
  for (int x = 0; x < kMatrixWidth; x++) {
    for (int y = 0; y < kMatrixHeight; y++) {
      byte color = sin8(sqrt(sq(((float)x - 7.5) * 12 + xOffset) + sq(((float)y - 2) * 12 + yOffset)) + offset);
      leds[XY(x, y)] = ColorFromPalette(currentPalette, color, 255);
    }
  }
  offset++; // wraps at 255 for sin8
  plasVector += 1; // using an int for slower orbit (wraps at 65536)
}

// RotatingPlasma
void radiate2() {

  static byte offset  = 0; // counter for radial color wave motion
  static int plasVector = 4; // counter for orbiting plasma center

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    selectRandomPalette();
    fadingActive = true;
  }

  // Calculate current center of plasma pattern (can be offscreen)
  int xOffset = (cos8(plasVector) - 127) / 2;
  int yOffset = 0;

  //int xOffset = (cos8(plasVector)-127)/2;
  //int yOffset = (sin8(plasVector)-127)/2;

  //int xOffset = 0;
  //int yOffset = 0;

  // Draw one frame of the animation into the LED array
  for (int x = 0; x < kMatrixWidth; x++) {
    for (int y = 0; y < kMatrixHeight; y++) {
      byte color = sin8(sqrt(sq(((float)x - 7.5) * 12 + xOffset) + sq(((float)y - 2) * 12 + yOffset)) + offset);
      leds[XY(x, y)] = ColorFromPalette(currentPalette, color, 255);
    }
  }
  offset++; // wraps at 255 for sin8
  plasVector += 1; // using an int for slower orbit (wraps at 65536)
}

// RotatingPlasma
void spinPlasma() {

  static byte offset  = 0; // counter for radial color wave motion
  static int plasVector = 0; // counter for orbiting plasma center

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    selectRandomPalette();
    fadingActive = true;
  }

  // Calculate current center of plasma pattern (can be offscreen)
  int xOffset = (cos8(plasVector) - 127) / 2;
  int yOffset = (sin8(plasVector) - 127) / 2;

  //int xOffset = 0;
  //int yOffset = 0;

  // Draw one frame of the animation into the LED array
  for (int x = 0; x < kMatrixWidth; x++) {
    for (int y = 0; y < kMatrixHeight; y++) {
      byte color = sin8(sqrt(sq(((float)x - 7.5) * 12 + xOffset) + sq(((float)y - 2) * 12 + yOffset)) + offset);
      leds[XY(x, y)] = ColorFromPalette(currentPalette, color, 255);
    }
  }
  offset++; // wraps at 255 for sin8
  plasVector += 1; // using an int for slower orbit (wraps at 65536)
}

// Crossfading alternate colors
DEFINE_GRADIENT_PALETTE( checkermap_gp) {
  0,   0,   0,  0,
  63, 255,   0,  0,
  127,   0,   0,  0,
  191,   0, 255,  0,
  255,   0,   0,  0
};



void blueSnake() {

  static int mx = 0;
  static int lx = 0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fadingActive = true;
    fillAll(CRGB::Black);

    // Reset corner LEDs to red
    leds[0] = CRGB::Red;
    leds[29] = CRGB::Red;
    leds[30] = CRGB::Red;
    leds[57] = CRGB::Red;
    leds[58] = CRGB::Red;
    leds[13] = CRGB::Red;
    leds[14] = CRGB::Red;
    leds[43] = CRGB::Red;
    leds[44] = CRGB::Red;
    leds[67] = CRGB::Red;

    // Reset counter
    mx = 0;
    lx = 0;

    // Effektens hastighet
    effectDelay = 20;
  }

  if (mx <= 67) {
    leds[mx].r = 0;
    leds[mx].g = 0;
    leds[mx].b = 255;
    mx++;
  }
  if (mx == 68) {
    if (lx <= 67) {
      leds[lx] = CRGB::Black;
      lx++;
    }
    if (lx == 68) {
      // Reset all
      effectInit = false;
    }
  }
}


// Draw slanting bars scrolling across the array, uses current hue
void slantBars2() {

  static byte slantPos = 0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 5;
    fadingActive = true;
  }

  for (byte x = 0; x < kMatrixWidth; x++) {
    for (byte y = 0; y < kMatrixHeight; y++) {
      leds[XY(x, y)] = CHSV(cycleHue, 255, quadwave8(x * 64 + y * 64 + slantPos));
    }
  }

  slantPos -= 2;
}

void bpm() {
  bool gReverseDirection = false;
  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 0;
    fadingActive = true;
  }

  uint8_t gHue = 120;
  // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
  uint8_t BeatsPerMinute = 45;
  CRGBPalette16 palette = RainbowColors_p;
  uint8_t beat = beatsin8( BeatsPerMinute, 64, 255);

  for ( int i = 0; i < NUM_LEDS; i++) {
    leds[i] = ColorFromPalette(palette, gHue + (i * 2), beat - gHue + (i * 10));

    int pixelnumber;

    if ( gReverseDirection ) {
      pixelnumber = (NUM_LEDS - 1) - i;
    } else {
      pixelnumber = i;
    }
    leds[pixelnumber] = ColorFromPalette(palette, gHue + (i * 2), beat - gHue + (i * 10));
  }
  //  byte scrollY = 0;
  //  for (byte y = 0; y < kMatrixHeight; y++) {
  //    if (scrollDir == 0) {
  //      scrollY = kMatrixHeight - y;
  //    } else if (scrollDir == 1) {
  //      scrollY = y;
  //    }
  //
  //    for (byte x = 0; x < kMatrixWidth; x++) {
  //      leds[XY(x, scrollY)] = leds[XY(x, scrollY + scrollDir * 2 - 1)];
  //    }
  //  }
}


void redBorder() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fillAll(CRGB::Black);
    effectDelay = 50;
    fadingActive = true;
  }
  // leds[ XY(13,2) ] == CRGB::Red;

  leds[0] = CRGB::Red;
  leds[1] = CRGB::Red;
  leds[2] = CRGB::Red;
  leds[3] = CRGB::Red;
  leds[4] = CRGB::Red;
  leds[5] = CRGB::Red;
  leds[6] = CRGB::Red;
  leds[7] = CRGB::Red;
  leds[8] = CRGB::Red;
  leds[9] = CRGB::Red;
  leds[10] = CRGB::Red;
  leds[11] = CRGB::Red;
  leds[12] = CRGB::Red;
  leds[13] = CRGB::Red;
  leds[16] = CRGB::Red;
  leds[18] = CRGB::Red;
  leds[41] = CRGB::Red;
  leds[39] = CRGB::Red;
  leds[20] = CRGB::Red;
  leds[48] = CRGB::Red;
  leds[46] = CRGB::Red;
  leds[25] = CRGB::Red;
  leds[37] = CRGB::Red;
  leds[50] = CRGB::Red;
  leds[67] = CRGB::Red;
  leds[66] = CRGB::Red;
  leds[65] = CRGB::Red;
  leds[64] = CRGB::Red;
  leds[63] = CRGB::Red;
  leds[50] = CRGB::Red;
  leds[23] = CRGB::Red;
  leds[27] = CRGB::Red;
  leds[29] = CRGB::Red;
  leds[30] = CRGB::Red;
  leds[32] = CRGB::Red;
  leds[34] = CRGB::Red;
  leds[36] = CRGB::Red;
  leds[51] = CRGB::Red;
  leds[53] = CRGB::Red;
  leds[55] = CRGB::Red;
  leds[57] = CRGB::Red;
  leds[58] = CRGB::Red;
  leds[59] = CRGB::Red;
  leds[60] = CRGB::Red;
  leds[61] = CRGB::Red;
  leds[62] = CRGB::Red;
  leds[14] = CRGB::Red;
  leds[43] = CRGB::Red;
  leds[44] = CRGB::Red;
  leds[67] = CRGB::Red;
}

void redBorder2() {
  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fillAll(CRGB::Black);
    effectDelay = 50;
    fadingActive = true;
  }
  // leds[ XY(13,2) ] == CRGB::Red;
  leds[0] = CRGB::Red;
  leds[1] = CRGB::Red;
  leds[2] = CRGB::Red;
  leds[3] = CRGB::Red;
  leds[4] = CRGB::Red;
  leds[5] = CRGB::Red;
  leds[6] = CRGB::Red;
  leds[7] = CRGB::Red;
  leds[8] = CRGB::Red;
  leds[9] = CRGB::Red;
  leds[10] = CRGB::Red;
  leds[11] = CRGB::Red;
  leds[12] = CRGB::Red;
  leds[13] = CRGB::Red;
  leds[21] = CRGB::Red;
  leds[22] = CRGB::Red;
  leds[37] = CRGB::Red;
  leds[50] = CRGB::Red;
  leds[67] = CRGB::Red;
  leds[66] = CRGB::Red;
  leds[65] = CRGB::Red;
  leds[64] = CRGB::Red;
  leds[63] = CRGB::Red;
  leds[50] = CRGB::Red;
  leds[29] = CRGB::Red;
  leds[30] = CRGB::Red;
  leds[36] = CRGB::Red;
  leds[51] = CRGB::Red;
  leds[57] = CRGB::Red;
  leds[58] = CRGB::Red;
  leds[59] = CRGB::Red;
  leds[60] = CRGB::Red;
  leds[61] = CRGB::Red;
  leds[62] = CRGB::Red;
  leds[14] = CRGB::Red;
  leds[43] = CRGB::Red;
  leds[44] = CRGB::Red;
  leds[67] = CRGB::Red;
}

void blueBorder() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fillAll(CRGB(50, 60, 50));
    effectDelay = 50;
    fadingActive = true;
  }

  leds[0] = CRGB::Blue;
  leds[1] = CRGB::Blue;
  leds[2] = CRGB::Blue;
  leds[3] = CRGB::Blue;
  leds[4] = CRGB::Blue;
  leds[5] = CRGB::Blue;
  leds[6] = CRGB::Blue;
  leds[7] = CRGB::Blue;
  leds[8] = CRGB::Blue;
  leds[9] = CRGB::Blue;
  leds[10] = CRGB::Blue;
  leds[11] = CRGB::Blue;
  leds[12] = CRGB::Blue;
  leds[13] = CRGB::Blue;
  leds[21] = CRGB::Blue;
  leds[37] = CRGB::Blue;
  leds[50] = CRGB::Blue;
  leds[67] = CRGB::Blue;
  leds[66] = CRGB::Blue;
  leds[65] = CRGB::Blue;
  leds[64] = CRGB::Blue;
  leds[63] = CRGB::Blue;
  leds[50] = CRGB::Blue;
  leds[22] = CRGB::Blue;
  leds[29] = CRGB::Blue;
  leds[30] = CRGB::Blue;
  leds[36] = CRGB::Blue;
  leds[51] = CRGB::Blue;
  leds[57] = CRGB::Blue;
  leds[58] = CRGB::Blue;
  leds[59] = CRGB::Blue;
  leds[60] = CRGB::Blue;
  leds[61] = CRGB::Blue;
  leds[62] = CRGB::Blue;
  leds[14] = CRGB::Blue;
  leds[43] = CRGB::Blue;
  leds[44] = CRGB::Blue;
  leds[67] = CRGB::Blue;
}

void greenBorder() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fillAll(CRGB::Black);
    effectDelay = 50;
    fadingActive = true;
  }

  leds[0] = CRGB::Green;
  leds[1] = CRGB::Green;
  leds[2] = CRGB::Green;
  leds[3] = CRGB::Green;
  leds[4] = CRGB::Green;
  leds[5] = CRGB::Green;
  leds[6] = CRGB::Green;
  leds[7] = CRGB::Green;
  leds[8] = CRGB::Green;
  leds[9] = CRGB::Green;
  leds[10] = CRGB::Green;
  leds[11] = CRGB::Green;
  leds[12] = CRGB::Green;
  leds[13] = CRGB::Green;
  leds[21] = CRGB::Green;
  leds[37] = CRGB::Green;
  leds[50] = CRGB::Green;
  leds[67] = CRGB::Green;
  leds[66] = CRGB::Green;
  leds[65] = CRGB::Green;
  leds[64] = CRGB::Green;
  leds[63] = CRGB::Green;
  leds[50] = CRGB::Green;
  leds[22] = CRGB::Green;
  leds[29] = CRGB::Green;
  leds[30] = CRGB::Green;
  leds[36] = CRGB::Green;
  leds[51] = CRGB::Green;
  leds[57] = CRGB::Green;
  leds[58] = CRGB::Green;
  leds[59] = CRGB::Green;
  leds[60] = CRGB::Green;
  leds[61] = CRGB::Green;
  leds[62] = CRGB::Green;
  leds[14] = CRGB::Green;
  leds[43] = CRGB::Green;
  leds[44] = CRGB::Green;
  leds[67] = CRGB::Green;
}

// Smoothly falling white dots
void snow() {

  static unsigned int snowCols[kMatrixWidth] = {0};

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 20;
    fadingActive = true;
  }

  CRGB snowColor = CRGB::White;

  FastLED.clear();

  for (byte i = 0; i < kMatrixWidth; i++) {
    if (snowCols[i] > 0) {
      snowCols[i] += random(4, 16);
    } else {
      if (random8(0, 100) == 0) snowCols[i] = 1;
    }
    byte tempY = snowCols[i] >> 8;
    byte tempRem = snowCols[i] & 0xFF;
    if (tempY <= kMatrixHeight) leds[XY(i, tempY - 1)] = snowColor % dim8_raw(255 - tempRem);
    if (tempY < kMatrixHeight) leds[XY(i, tempY)] = snowColor % dim8_raw(tempRem);
    if (tempY > kMatrixHeight) snowCols[i] = 0;
  }
}

#define rainDir4 0
void rainDown2() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 60;
    fadingActive = true;
  }

  static uint8_t hue = 0;
  CRGBPalette16 palette = CloudColors_p;

  scrollArray2(rainDir4);
  byte randPixel = random8(kMatrixWidth);
  for (byte x = 0; x < kMatrixWidth; x++) {
    leds[XY(x, (kMatrixHeight - 1) * rainDir4)] = CRGB::Black;
  }
  leds[XY(randPixel, (kMatrixHeight - 1)*rainDir4)] = ColorFromPalette(palette, 240, 240);
}

#define rainDir2 1
void sideRain2() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 30;
    fadingActive = true;
  }

  scrollArray(rainDir2);
  byte randPixel = random8(kMatrixHeight);
  for (byte y = 0; y < kMatrixHeight; y++) leds[XY((kMatrixWidth - 1) * rainDir2, y)] = CRGB::Black;
  leds[XY((kMatrixWidth - 1)*rainDir2, randPixel)] = CHSV(cycleHue, 255, 255);

}

#define rainDir4 0
void rainDown() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 30;
    fadingActive = true;
  }

  static uint8_t hue = 0;

  scrollArray2(rainDir4);
  byte randPixel = random8(kMatrixWidth);
  for (byte x = 0; x < kMatrixWidth; x++) {
    leds[XY(x, (kMatrixHeight - 1) * rainDir4)] = CRGB::Black;
  }
  leds[XY(randPixel, (kMatrixHeight - 1)*rainDir4)] = CHSV(cycleHue, 255, 255);
}

#define rainDir3 1
void rainUp() {
  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 30;
    currentPalette = CloudColors_p;
    fadingActive = true;
  }

  static uint8_t hue = 0;

  scrollArray2(rainDir3);
  byte randPixel = random8(kMatrixWidth);
  for (byte x = 0; x < kMatrixWidth; x++) {
    leds[XY(x, (kMatrixHeight - 1) * rainDir3)] = CRGB::Black;
  }
  // leds[XY(randPixel, (kMatrixHeight - 1)*rainDir3)] = CHSV(cycleHue, 255, 255);
  leds[XY(randPixel, (kMatrixHeight - 1)*rainDir3)] = ColorFromPalette(currentPalette, 240, 255);
}

// leds run around the periphery of the shades, changing color every go 'round
// modified from code by @terrag42
void shadesOutline() {
  static boolean erase = false;
  static uint8_t x, y = 0;
  static uint8_t currentColor = 0;
  //startup tasks
  if (effectInit == false) {
    effectInit = true;
    erase = false;
    x = 0;
    effectDelay = 15;
    FastLED.clear();
    currentPalette = RainbowColors_p;
    fadingActive = true;
  }

  const uint8_t OutlineTable[] = {
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 43,
    44, 67, 66, 65, 64, 63, 50, 37, 21, 22, 36, 51, 62, 61, 60, 59,
    58, 57, 30, 29
  };
  leds[OutlineTable[x]] = currentPalette[currentColor];
  if (erase)
    leds[OutlineTable[x]] = CRGB::Black;
  x++;
  if (x == (sizeof(OutlineTable))) {
    erase = !erase;
    x = 0;
    currentColor += random8(3, 6);
    if (currentColor > 15) currentColor -= 16;
  }
}

void shadesOutline2() {
  static boolean erase = false;
  static uint8_t x, y, z = 0;
  static uint8_t currentColor = 0;
  //startup tasks
  if (effectInit == false) {
    effectInit = true;
    erase = false;
    x = 0;
    y = 0;
    z = 0;
    effectDelay = 15;
    FastLED.clear();
    currentPalette = RainbowColors_p;
    fadingActive = true;
  }
  const uint8_t OutlineTable[] = {
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 43,
    44, 67, 66, 65, 64, 63, 50, 37, 21, 22, 36, 51, 62, 61, 60, 59,
    58, 57, 30, 29
  };
  const uint8_t OutlineTable2[] = {
    23, 24, 25, 26, 27, 28, 31, 56, 55, 54, 53, 52, 35, 34, 33, 32
  };
  const uint8_t OutlineTable3[] = {
    20, 19, 18, 17, 16, 15, 42, 45, 46, 47, 48, 49, 38, 39, 40, 41
  };

  leds[OutlineTable[x]] = currentPalette[currentColor];
  if (erase)
    leds[OutlineTable[x]] = currentPalette[currentColor];
  x++;
  if (x == (sizeof(OutlineTable))) {
    erase = !erase;
    x = 0;
    currentColor += random8(3, 6);
    if (currentColor > 15) currentColor -= 16;
  }

  leds[OutlineTable2[y]] = currentPalette[currentColor];
  if (erase)
    leds[OutlineTable2[y]] = currentPalette[currentColor];
  y++;
  if (y == (sizeof(OutlineTable2))) {
    erase = !erase;
    y = 0;
    //    currentColor += random8(3, 3);
    //     if (currentColor > 6) currentColor -= 7;
  }

  leds[OutlineTable3[z]] = currentPalette[currentColor];
  if (erase)
    leds[OutlineTable3[z]] = currentPalette[currentColor];
  z++;
  if (z == (sizeof(OutlineTable3))) {
    erase = !erase;
    z = 0;
    //    currentColor += random8(1, 1);
    //    if (currentColor > 6) currentColor -= 7;
  }
}

void shadesOutline3() {
  static boolean erase = false;
  static uint8_t x, y, z = 0;
  static uint8_t currentColor = 0;
  //startup tasks
  if (effectInit == false) {
    effectInit = true;
    erase = false;
    x = 0;
    y = 0;
    z = 0;
    effectDelay = 15;
    FastLED.clear();
    // selectRandomPalette();
    currentPalette = RainbowColors_p;
    fadingActive = true;
  }

  const uint8_t OutlineTable[] = {
    6, 5, 4, 3, 2, 1, 0, 29, 30, 57, 58, 59, 60, 61, 62, 51, 36, 22, 23, 24, 25, 26, 27, 28, 31, 56, 55, 54, 53, 52, 35, 34, 33, 32, 31
  };
  const uint8_t OutlineTable2[] = {
    7, 8, 9, 10, 11, 12, 13, 14, 43, 44, 67, 66, 65, 64, 63, 50, 37, 21, 20, 19, 18, 17, 16, 15, 42, 45, 46, 47, 48, 49, 38, 39, 40, 41
  };

  leds[OutlineTable[x]] = currentPalette[currentColor];
  leds[OutlineTable2[y]] = currentPalette[currentColor];
  if (erase)
    leds[OutlineTable[x]] = currentPalette[currentColor];
  leds[OutlineTable2[y]] = currentPalette[currentColor];
  x++;
  y++;
  if (x == (sizeof(OutlineTable)) || y == (sizeof(OutlineTable2))) {
    erase = !erase;
    x = 0;
    y = 0;
    currentColor += random8(3, 6);
    if (currentColor > 15) currentColor -= 16;
  }
}
// Crossfading alternate colors
DEFINE_GRADIENT_PALETTE( outline_gp) {
  0,   0,   35,  0,
  0, 255,   0,  0,
  255,   0,   0,  0,
  0,   0, 255,  0,
  255,   0,   0,  0
};

void shadesOutline4() {
  static boolean erase = false;
  static uint8_t x, y, z = 0;
  static uint8_t currentColor = 0;
  //startup tasks
  if (effectInit == false) {
    effectInit = true;
    erase = false;
    x = 0;
    y = 0;
    z = 0;
    effectDelay = 15;
    FastLED.clear();
    // selectRandomPalette();
    // currentPalette = RainbowColors_p;
    currentPalette = outline_gp;
    fadingActive = true;
  }
  const uint8_t OutlineTable[] = {
    30, 31, 27, 2, 26, 33, 54, 60, 53, 35, 36, 37, 38, 18, 11, 17, 40, 47, 65, 46, 42, 43
  };

  //  const uint8_t OutlineTable[] = {
  //   29,30,57,58,59,55,32,27,1,2,3,25,34,53,61,62,51,36,23,5,6,7,8,20,37,50,63,64,48,39,18,10,11,12,16,41,46,66,67,44,43,14
  //  };
  //  const uint8_t OutlineTable2[] = {
  //    7,8,9,10,11,12,13,14,43,44,67,66,65,64,63,50,37,21,20,19,18,17,16,15,42,45,46,47,48,49,38,39,40,41
  //  };
  //
  leds[OutlineTable[x]] = currentPalette[currentColor];
  //  leds[OutlineTable2[y]] = currentPalette[currentColor];
  if (erase)
    leds[OutlineTable[x]] = currentPalette[currentColor];
  //    leds[OutlineTable2[y]] = currentPalette[currentColor];
  x++;
  //  y++;
  // if (x == (sizeof(OutlineTable)) || y == (sizeof(OutlineTable2))) {
  if (x == (sizeof(OutlineTable))) {
    erase = !erase;
    x = 0;
    // y = 0;
    currentColor += random8(3, 6);
    if (currentColor > 15) currentColor -= 16;
  }
}
// Display bursts of sparks
void fireworks() {

  byte sparksDone = 0;
  static int sparkLife = 50;
  static boolean boom = false;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 5;
    gSkyburst = 1;
    fadingActive = true;
  }
  if (boom) {
    FastLED.clear();
    boom = false;
  } else {
    fadeAll(40);
  }
  if (sparkLife > 0) sparkLife--;

  for ( byte b = 0; b < NUM_SPARKS; b++) {
    if (sparkLife <= 0) gSparks[b].show = 0;
    gSparks[b].Move();
    gSparks[b].Draw();
    sparksDone += gSparks[b].show;
  }

  if (sparksDone == 0 && beatDetect()) gSkyburst = 1;
  //Serial.println(sparksDone);

  if ( gSkyburst) {
    effectDelay = 5;
    sparkLife = random(16, 150);
    CRGB color;
    hsv2rgb_rainbow( CHSV( random8(), 255, 255), color);
    accum88 sx = random(127 - 64, 127 + 64) << 8;
    accum88 sy = random(127 - 16, 127 + 16) << 8;
    for ( byte b = 0; b < NUM_SPARKS; b++) {
      gSparks[b].Skyburst(sx, sy, 0, color);
    }
    gSkyburst = 0;
    sparksDone = 0;
    fillAll(CRGB::Gray);
    boom = true;
  }
}

// Triple Sine Waves
void threeSine() {

  static byte sineOffset = 0; // counter for current position of sine waves

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 20;
    fadingActive = true;
  }

  // Draw one frame of the animation into the LED array
  for (byte x = 0; x < kMatrixWidth; x++) {
    for (int y = 0; y < kMatrixHeight; y++) {

      // Calculate "sine" waves with varying periods
      // sin8 is used for speed; cos8, quadwave8, or triwave8 would also work here
      byte sinDistanceR = qmul8(abs(y * (255 / kMatrixHeight) - sin8(sineOffset * 9 + x * 16)), 2);
      byte sinDistanceG = qmul8(abs(y * (255 / kMatrixHeight) - sin8(sineOffset * 10 + x * 16)), 2);
      byte sinDistanceB = qmul8(abs(y * (255 / kMatrixHeight) - sin8(sineOffset * 11 + x * 16)), 2);

      leds[XY(x, y)] = CRGB(255 - sinDistanceR, 255 - sinDistanceG, 255 - sinDistanceB);
    }
  }
  sineOffset++; // byte will wrap from 255 to 0, matching sin8 0-255 cycle
}


// RGB Plasma
void plasma() {

  static byte offset  = 0; // counter for radial color wave motion
  static int plasVector = 0; // counter for orbiting plasma center

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    fadingActive = true;
  }

  // Calculate current center of plasma pattern (can be offscreen)
  int xOffset = cos8(plasVector / 256);
  int yOffset = sin8(plasVector / 256);

  // Draw one frame of the animation into the LED array
  for (int x = 0; x < kMatrixWidth; x++) {
    for (int y = 0; y < kMatrixHeight; y++) {
      byte color = sin8(sqrt(sq(((float)x - 7.5) * 10 + xOffset - 127) + sq(((float)y - 2) * 10 + yOffset - 127)) + offset);
      leds[XY(x, y)] = CHSV(color, 255, 255);
    }
  }
  offset++; // wraps at 255 for sin8
  plasVector += 16; // using an int for slower orbit (wraps at 65536)
}

// Scanning pattern left/right, uses global hue cycle
void rider() {

  static byte riderPos = 0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 5;
    riderPos = 0;
    fadingActive = true;
  }

  // Draw one frame of the animation into the LED array
  for (byte x = 0; x < kMatrixWidth; x++) {
    int brightness = abs(x * (256 / kMatrixWidth) - triwave8(riderPos) * 2 + 127) * 3;
    if (brightness > 255) brightness = 255;
    brightness = 255 - brightness;
    CRGB riderColor = CHSV(cycleHue, 255, brightness);
    for (byte y = 0; y < kMatrixHeight; y++) {
      leds[XY(x, y)] = riderColor;
    }
  }
  riderPos++; // byte wraps to 0 at 255, triwave8 is also 0-255 periodic
}

// Shimmering noise, uses global hue cycle
void glitter() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 15;
    fadingActive = true;
  }

  // Draw one frame of the animation into the LED array
  for (int x = 0; x < kMatrixWidth; x++) {
    for (int y = 0; y < kMatrixHeight; y++) {
      leds[XY(x, y)] = CHSV(cycleHue, 255, random8(5) * 63);
    }
  }
}

// Fills saturated colors into the array from alternating directions
void colorFill() {

  static byte currentColor = 0;
  static byte currentRow = 0;
  static byte currentDirection = 0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 45;
    currentColor = 0;
    currentRow = 0;
    currentDirection = 0;
    currentPalette = RainbowColors_p;
    fadingActive = true;
  }
  // test a bitmask to fill up or down when currentDirection is 0 or 2 (0b00 or 0b10)
  if (!(currentDirection & 1)) {
    effectDelay = 45; // slower since vertical has fewer pixels
    for (byte x = 0; x < kMatrixWidth; x++) {
      byte y = currentRow;
      if (currentDirection == 2) y = kMatrixHeight - 1 - currentRow;
      leds[XY(x, y)] = currentPalette[currentColor];
    }
  }

  // test a bitmask to fill left or right when currentDirection is 1 or 3 (0b01 or 0b11)
  if (currentDirection & 1) {
    effectDelay = 20; // faster since horizontal has more pixels
    for (byte y = 0; y < kMatrixHeight; y++) {
      byte x = currentRow;
      if (currentDirection == 3) x = kMatrixWidth - 1 - currentRow;
      leds[XY(x, y)] = currentPalette[currentColor];
    }
  }

  currentRow++;

  // detect when a fill is complete, change color and direction
  if ((!(currentDirection & 1) && currentRow >= kMatrixHeight) || ((currentDirection & 1) && currentRow >= kMatrixWidth)) {
    currentRow = 0;
    currentColor += random8(3, 6);
    if (currentColor > 15) currentColor -= 16;
    currentDirection++;
    if (currentDirection > 3) currentDirection = 0;
    effectDelay = 300; // wait a little bit longer after completing a fill
  }
}

// Emulate 3D anaglyph glasses
void threeDee() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 50;
    fadingActive = true;
  }

  for (byte x = 0; x < kMatrixWidth; x++) {
    for (byte y = 0; y < kMatrixHeight; y++) {
      if (x < 7) {
        leds[XY(x, y)] = CRGB::Blue;
      } else if (x > 8) {
        leds[XY(x, y)] = CRGB::Red;
      } else {
        leds[XY(x, y)] = CRGB::Black;
      }
    }
  }
  leds[XY(6, 0)] = CRGB::Black;
  leds[XY(9, 0)] = CRGB::Black;
}

// Random pixels scroll sideways, uses current hue
#define rainDir 0
void sideRain() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 30;
    fadingActive = true;
  }

  scrollArray(rainDir);
  byte randPixel = random8(kMatrixHeight);
  for (byte y = 0; y < kMatrixHeight; y++) leds[XY((kMatrixWidth - 1) * rainDir, y)] = CRGB::Black;
  leds[XY((kMatrixWidth - 1)*rainDir, randPixel)] = CHSV(cycleHue, 255, 255);

}

// Pixels with random locations and random colors selected from a palette
// Use with the fadeAll function to allow old pixels to decay
void confetti() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    selectRandomPalette();
    fadingActive = true;
  }

  // scatter random colored pixels at several random coordinates
  for (byte i = 0; i < 4; i++) {
    leds[XY(random16(kMatrixWidth), random16(kMatrixHeight))] = ColorFromPalette(currentPalette, random16(255), 255); //CHSV(random16(255), 255, 255);
    random16_add_entropy(1);
  }
}


// Draw slanting bars scrolling across the array, uses current hue
void slantBars() {

  static byte slantPos = 0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 5;
    fadingActive = true;
  }

  for (byte x = 0; x < kMatrixWidth; x++) {
    for (byte y = 0; y < kMatrixHeight; y++) {
      leds[XY(x, y)] = CHSV(cycleHue, 255, quadwave8(x * 32 + y * 32 + slantPos));
    }
  }
  slantPos -= 4;
}


#define NORMAL 0
#define RAINBOW 1
#define charSpacing 2
// Scroll a text string
void scrollText(byte message, byte style, CRGB fgColor, CRGB bgColor) {
  static byte currentMessageChar = 0;
  static byte currentCharColumn = 0;
  static byte paletteCycle = 0;
  static CRGB currentColor;
  static byte bitBuffer[16] = {0};
  static byte bitBufferPointer = 0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 35;
    currentMessageChar = 0;
    currentCharColumn = 0;
    selectFlashString(message);
    loadCharBuffer(loadStringChar(message, currentMessageChar));
    currentPalette = RainbowColors_p;
    fadingActive = true;
    for (byte i = 0; i < kMatrixWidth; i++) bitBuffer[i] = 0;
  }

  paletteCycle += 15;

  if (currentCharColumn < 5) { // characters are 5 pixels wide
    bitBuffer[(bitBufferPointer + kMatrixWidth - 1) % kMatrixWidth] = charBuffer[currentCharColumn]; // character
  } else {
    bitBuffer[(bitBufferPointer + kMatrixWidth - 1) % kMatrixWidth] = 0; // space
  }

  CRGB pixelColor;
  for (byte x = 0; x < kMatrixWidth; x++) {
    for (byte y = 0; y < 5; y++) { // characters are 5 pixels tall
      if (bitRead(bitBuffer[(bitBufferPointer + x) % kMatrixWidth], y) == 1) {
        if (style == RAINBOW) {
          pixelColor = ColorFromPalette(currentPalette, paletteCycle + y * 16, 255);
        } else {
          pixelColor = fgColor;
        }
      } else {
        pixelColor = bgColor;
      }
      leds[XY(x, y)] = pixelColor;
    }
  }

  currentCharColumn++;
  if (currentCharColumn > (4 + charSpacing)) {
    currentCharColumn = 0;
    currentMessageChar++;
    char nextChar = loadStringChar(message, currentMessageChar);
    if (nextChar == 0) { // null character at end of strong
      currentMessageChar = 0;
      nextChar = loadStringChar(message, currentMessageChar);
    }
    loadCharBuffer(nextChar);
  }
  bitBufferPointer++;
  if (bitBufferPointer > 15) bitBufferPointer = 0;
}


void scrollTextZero() {
  scrollText(0, NORMAL, CRGB::Red, CRGB::Black);
}

void scrollTextOne() {
  scrollText(1, RAINBOW, 0, CRGB::Black);
}

void scrollTextTwo() {
  scrollText(2, RAINBOW, CRGB::Green, CRGB(0, 0, 8));
}

void scrollTextThree() {
  scrollText(3, NORMAL, CHSV(40, 75, 255), CRGB::Black);
}

#define analyzerFadeFactor 5
#define analyzerScaleFactor 1.5
#define analyzerPaletteFactor 2
void drawAnalyzer() {
  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    fadingActive = true;
    selectRandomPalette();
  }

  CRGB pixelColor;

  const float yScale = 255.0 / kMatrixHeight;

  for (byte x = 0; x < kMatrixWidth / 2; x++) {
    byte newX = x;
    int freqVal;
    if (x < 2) {
      newX = 0;
      freqVal = spectrumDecay[newX] / 2;
    } else {
      newX = x - 1;
      freqVal = spectrumDecay[newX];
    }

    for (byte y = 0; y < kMatrixHeight; y++) {
      if (x > 6) {
        pixelColor = ColorFromPalette(currentPalette, 0, 0);
      } else {
        int senseValue = freqVal / analyzerScaleFactor - yScale * (kMatrixHeight - 1 - y);
        int pixelBrightness = senseValue * analyzerFadeFactor;
        if (pixelBrightness > 255) pixelBrightness = 255;
        if (pixelBrightness < 0) pixelBrightness = 0;

        int pixelPaletteIndex = senseValue / analyzerPaletteFactor - 15;
        if (pixelPaletteIndex > 240) pixelPaletteIndex = 240;
        if (pixelPaletteIndex < 0) pixelPaletteIndex = 0;

        pixelColor = ColorFromPalette(currentPalette, pixelPaletteIndex, pixelBrightness);
      }
      leds[XY(x, y)] = pixelColor;
      leds[XY(kMatrixWidth - x - 1, y)] = pixelColor;
    }
  }
}

void drawWideAnalyzer() {
  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    fadingActive = true;
    selectRandomPalette();
  }

  CRGB pixelColor;

  const float yScale = 255.0 / kMatrixHeight;

  for (byte x = 0; x < kMatrixWidth / 2; x++) {
    byte newX = x;
    int freqVal;
    if (x < 2) {
      newX = 0;
      freqVal = spectrumDecay[newX] / 2;
    } else {
      newX = x - 1;
      freqVal = spectrumDecay[newX];
    }

    for (byte y = 0; y < kMatrixHeight; y++) {
      if (x > 6) {
        pixelColor = ColorFromPalette(currentPalette, 0, 0);
      } else {
        int senseValue = freqVal / analyzerScaleFactor - yScale * (kMatrixHeight - 1 - y);
        int pixelBrightness = senseValue * analyzerFadeFactor;
        if (pixelBrightness > 255) pixelBrightness = 255;
        if (pixelBrightness < 0) pixelBrightness = 0;

        int pixelPaletteIndex = senseValue / analyzerPaletteFactor - 15;
        if (pixelPaletteIndex > 240) pixelPaletteIndex = 240;
        if (pixelPaletteIndex < 0) pixelPaletteIndex = 0;

        pixelColor = ColorFromPalette(currentPalette, pixelPaletteIndex, pixelBrightness);
      }
      leds[XY((2 * x) + 1, y)] = pixelColor;
      leds[XY((2 * x) + 2, y)] = pixelColor;
    }
  }
}

void drawMixedAnalyzer() {
  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    fadingActive = true;
    selectRandomPalette();
  }

  CRGB pixelColor;

  const float yScale = 255.0 / kMatrixHeight;

  for (byte x = 0; x < kMatrixWidth / 2; x++) {
    byte newX = x;
    int freqVal;
    if (x < 2) {
      newX = 0;
      freqVal = spectrumDecay[newX] / 2;
    } else {
      newX = x - 1;
      freqVal = spectrumDecay[newX];
    }

    for (byte y = 0; y < kMatrixHeight; y++) {
      if (x > 6) {
        pixelColor = ColorFromPalette(currentPalette, 0, 0);
      } else {
        int senseValue = freqVal / analyzerScaleFactor - yScale * (kMatrixHeight - 1 - y);
        int pixelBrightness = senseValue * analyzerFadeFactor;
        if (pixelBrightness > 255) pixelBrightness = 255;
        if (pixelBrightness < 0) pixelBrightness = 0;

        int pixelPaletteIndex = senseValue / analyzerPaletteFactor - 15;
        if (pixelPaletteIndex > 240) pixelPaletteIndex = 240;
        if (pixelPaletteIndex < 0) pixelPaletteIndex = 0;

        pixelColor = ColorFromPalette(currentPalette, pixelPaletteIndex, pixelBrightness);
      }
      leds[XY((2 * x) + 1, y)] = pixelColor;
      leds[XY(15 - ((2 * x) + 1), y)] = pixelColor;
    }
  }
}


#define VUFadeFactor 5
#define VUScaleFactor 2.0
#define VUPaletteFactor 1.5
void drawVU() {
  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fadingActive = true;
    effectDelay = 10;
    selectRandomPalette();
  }

  CRGB pixelColor;

  const float xScale = 255.0 / (kMatrixWidth / 2);
  float specCombo = (spectrumDecay[0] + spectrumDecay[1] + spectrumDecay[2] + spectrumDecay[3]) / 4.0;

  for (byte x = 0; x < kMatrixWidth / 2; x++) {
    int senseValue = specCombo / VUScaleFactor - xScale * x;
    int pixelBrightness = senseValue * VUFadeFactor;
    if (pixelBrightness > 255) pixelBrightness = 255;
    if (pixelBrightness < 0) pixelBrightness = 0;

    int pixelPaletteIndex = senseValue / VUPaletteFactor - 15;
    if (pixelPaletteIndex > 240) pixelPaletteIndex = 240;
    if (pixelPaletteIndex < 0) pixelPaletteIndex = 0;

    pixelColor = ColorFromPalette(currentPalette, pixelPaletteIndex, pixelBrightness);

    for (byte y = 0; y < kMatrixHeight; y++) {
      leds[XY(x, y)] = pixelColor;
      leds[XY(kMatrixWidth - x - 1, y)] = pixelColor;
    }
  }
}

void RGBpulse() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fadingActive = true;
    effectDelay = 1;
  }

  static byte RGBcycle = 0;

  fadeAll(1);

  if (beatDetect()) {

    switch (RGBcycle) {
      case 0:
        fillAll(CRGB::OrangeRed);
        break;
      case 1:
        fillAll(CRGB::Lime);
        break;
      case 2:
        fillAll(CRGB::MediumBlue);
        break;
    }

    RGBcycle++;
    if (RGBcycle > 2) RGBcycle = 0;
  }
}


void whitePulse() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fadingActive = true;
    effectDelay = 1;
  }

  fadeAll(2);

  if (beatDetect()) {

    fillAll(CHSV(1, 0, 255));
  }
}



const byte bitmaps[14][5] =
{
  {
    // 0 - ghosts
    0b00111000,
    0b01111100,
    0b01010100,
    0b01111100,
    0b01010100
  },
  // 1 - circles
  {
    0b00111000,
    0b01000100,
    0b01000100,
    0b01000100,
    0b00111000
  },
  // 2- up arrow
  {
    0b00010000,
    0b00111000,
    0b01111100,
    0b00111000,
    0b00111000
  },
  // 3 - down arrow
  {
    0b00111000,
    0b00111000,
    0b01111100,
    0b00111000,
    0b00010000
  },
  // 4 - squares
  {
    0b01111100,
    0b01000100,
    0b01000100,
    0b01000100,
    0b01111100
  },
  // 5 - crosses
  {
    0b00010000,
    0b00010000,
    0b01111100,
    0b00010000,
    0b00010000
  },
  // 6 - Hearts
  {
    0b01101100,
    0b11111110,
    0b01111100,
    0b00111000,
    0b00010000
  },
  // 7 - diamonds
  {
    0b00010000,
    0b00101000,
    0b01000100,
    0b00101000,
    0b00010000
  },
  // 8 - crosses
  {
    0b01000100,
    0b00101000,
    0b00010000,
    0b00101000,
    0b01000100
  },
  // 9 - hash
  {
    0b00101000,
    0b01111100,
    0b00101000,
    0b01111100,
    0b00101000
  },
  // 10 - ^ ^
  {
    0b00010000,
    0b00101000,
    0b01000100,
    0b00000000,
    0b00000000
  },
  // 11 - :)
  {
    0b00101000,
    0b00000000,
    0b01000100,
    0b00111000,
    0b00000000
  },
  // 12 - > <
    {
    0b00100000,
    0b00010000,
    0b00001000,
    0b00010000,
    0b00100000
  },
  // 13 - skull
  {
    0b00111000,
    0b01111100,
    0b01010100,
    0b01111100,
    0b00101000
  }
};


void iconPulse() {

  //static byte offset = 0;
  static byte icontodisplay = 0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fadingActive = true;
    effectDelay = 1;
    //offset = 0;
  }


  fadeAll(1);

  if (beatDetect()) {

    byte icontodisplay = random8(14);
    byte iconcolour = random8();

    //    for(byte i = 0; i < 40; i++)
    //    {
    //      leds[XY(i % 8, i / 8 )] = CHSV(iconcolour, 255, rgbshades_icons_data[icontodisplay][i]);
    //      leds[XY(15 - (i % 8), i / 8 )] = CHSV(iconcolour, 255, rgbshades_icons_data[icontodisplay][i]);
    //    }

    CRGB currentColor;
    for (byte y = 0; y < 5; y++) {
      for (byte x = 0; x < 8; x++) {
        if (bitRead(bitmaps[icontodisplay][y], 7 - x) == 1) {
          currentColor = CHSV(iconcolour, 255, 255);
        } else {
          currentColor = CRGB::Black;
        }
        leds[XY(x, y)] = currentColor;
        leds[XY(15 - x, y)] = currentColor;
      }
    }
  }
}


void monoIconPulse() {

  //static byte offset = 0;
  static byte icontodisplay = 0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    fadingActive = true;
    effectDelay = 1;
    //offset = 0;
  }


  fadeAll(2);

  if (beatDetect()) {

    byte icontodisplay = random8(14);
   
    //    for(byte i = 0; i < 40; i++)
    //    {
    //      leds[XY(i % 8, i / 8 )] = CHSV(iconcolour, 255, rgbshades_icons_data[icontodisplay][i]);
    //      leds[XY(15 - (i % 8), i / 8 )] = CHSV(iconcolour, 255, rgbshades_icons_data[icontodisplay][i]);
    //    }

    CRGB currentColor;
    for (byte y = 0; y < 5; y++) {
      for (byte x = 0; x < 8; x++) {
        if (bitRead(bitmaps[icontodisplay][y], 7 - x) == 1) {
          if (icontodisplay == 6) {
            currentColor = CRGB::Red;
          }
          else {
            currentColor = CHSV(40, 75, 255);
          }
        } else {
          currentColor = CRGB::Black;
        }
        leds[XY(x, y)] = currentColor;
        leds[XY(15 - x, y)] = currentColor;
      }
    }
  }
}



void iconStrobe() {

  static byte icontodisplay = 0;
  static byte count=0;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 3 ;
  }

  // This will happen once every 256 executions
  if (count == 0) {
    CRGB currentColor;
    byte icontodisplay = random8(13); // select random icon
    for (byte y = 0; y < 5; y++) {    // render the icon on left side and mirror on right side
      for (byte x = 0; x < 8; x++) {
        if (bitRead(bitmaps[icontodisplay][y], 7 - x) == 1) {
          currentColor = CRGB::White; // render the icon in white...
        } else {
          currentColor = CRGB::Black; // on a black background
        }
        leds[XY(x, y)] = currentColor;
        leds[XY(15 - x, y)] = currentColor;
      }
    }
  }

  // this will happen every 8 executions
  if (count % 8 == 0) {
    for (int i = 0; i < LAST_VISIBLE_LED + 1; i++) leds[i] = -leds[i]; // Invert each LED
  }

  count++;
   
}



#define vuScrollDir 0
#define vuScrollFadeFactor 15
#define vuScrollScaleFactor 3
void scrollingVU() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 60;
    fadingActive = true;
  }

  const float yScale = 255.0 / kMatrixHeight; // = 51
  CRGB pixelColor;
  float specCombo = (spectrumValue[0] + spectrumValue[1] + spectrumValue[2] + spectrumValue[3]) / 4.0; // Average of 1st 4 bands

  scrollArray(vuScrollDir);

  for (byte y = 0; y < kMatrixHeight; y++) {
    int senseValue = specCombo / vuScrollScaleFactor - yScale * y;  // 0<specCombo<4095 / 3 - 51 * 0 to 4
    int pixelBrightness = senseValue * vuScrollFadeFactor;
    if (pixelBrightness > 255) pixelBrightness = 255;
    if (pixelBrightness < 0) pixelBrightness = 0;
    pixelColor = CHSV(cycleHue, 255, pixelBrightness); // use huecycle
    leds[XY((kMatrixWidth - 1)*vuScrollDir, (kMatrixHeight - 1) - y)] = pixelColor; // paint random pixel with cyclehue colour
  }
}


void scrollingVUdot() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 30;
    fadingActive = true;
  }

  const float yScale = 255.0 / kMatrixHeight; // = 51
  CRGB pixelColor;
  float specCombo = (spectrumValue[0] + spectrumValue[1] + spectrumValue[2] + spectrumValue[3]) / 4.0;  // Average of 1st 4 bands

  scrollArray(vuScrollDir);
  for (byte y = 0; y < kMatrixHeight; y++) {
    pixelColor = CHSV(255, 255, 0); // black
    leds[XY((kMatrixWidth - 1)*vuScrollDir, y)] = pixelColor; // paint pixel with black
  }

  int vuYPixel = map(specCombo, 0, 3500, 0, kMatrixHeight - 1); // maps the 12 bit size of specCombo to the size of the matrix height/Y
  pixelColor = CHSV(cycleHue, 255, 255); // use huecycle
  leds[XY((kMatrixWidth - 1)*vuScrollDir, (kMatrixHeight - 1) - vuYPixel)] = pixelColor; // paint random pixel with cyclehue colour
}

#define barcodeScrollDir 1
void beatBarcode() {

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 10;
    fadingActive = true;
  }

  CRGB pixelColor;
  scrollArray(barcodeScrollDir);

  if (beatDetect()) {
    for (byte y = 0; y < kMatrixHeight; y++) {
      pixelColor = CHSV(cycleHue, 255, 255); // use huecycle
      leds[XY((kMatrixWidth - 1)*barcodeScrollDir, y)] = pixelColor; // paint random pixel with cyclehue colour
    }
  }
  else {
    for (byte y = 0; y < kMatrixHeight; y++) {
      pixelColor = CHSV(cycleHue, 255, 0); // use huecycle
      leds[XY((kMatrixWidth - 1)*barcodeScrollDir, y)] = pixelColor; // paint random pixel with cyclehue colour
    }
  }
}

// Snowflake
//const byte Grayscale[48][48] PROGMEM = {
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,  17,   0,   3,   0,   9,   0,   1,   0,   0,   0,   0,   0,   2,   0,   0,   3,   0,  19,   0,   0,   0,   1,  16,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  88, 255, 178,   0, 217, 233,   0,   0, 157, 224,  20,   4,   0,   0, 255, 177,   0,   1, 202, 225,   0, 143, 255,  81,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 255, 255, 125, 255, 169,   0, 192, 252, 238,   6,   2,   0,   0, 237, 253, 192,   0, 169, 255,  72, 255, 255, 113,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 190, 255, 255, 254,   0, 156, 255, 250,  21,   0,   0,   0,   5,  10, 251, 255, 173,   0, 248, 255, 251, 217,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,  31, 255, 255, 255, 255, 255, 159, 119, 255, 255,  51,   0,   0,   0,   0,   0,   0,  21, 255, 252, 136, 106, 255, 255, 255, 255, 255,  31,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0, 204, 201, 181, 243, 254, 251, 255, 255,  69,   0, 228, 154,   0,   0, 144, 208,  11,  73, 255, 255, 246, 254, 240, 179, 198, 195,   5,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  10,  54, 151, 255, 254, 253, 156,   0, 193, 249, 154,   0,   0, 152, 248, 210,   0, 131, 255, 252, 253, 167,  65,  13,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,  62, 192, 255, 255, 255, 255, 255, 255, 255,  61, 130, 255, 240,  11,   3,   0,   0, 242, 252, 156,  14, 255, 255, 255, 255, 255, 255, 255, 195,  67,   1,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   5,  38, 255, 255, 255, 255, 198, 150, 127, 254, 254, 251, 255, 255,  41,   2,   0,   0,  10,  33, 253, 252, 250, 255, 252, 126, 148, 193, 253, 255, 255, 255,  62,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,  65, 101,  12,   0,   0,  15,  18, 214, 255, 253, 253, 118,  48,  33,   0,   0,  23,  44, 119, 255, 253, 250, 219,  38,  18,   0,   0,   5,  88,  75,   0,   1,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 131, 237, 244, 251, 253, 254, 255, 255, 227, 255, 255,   0,   0, 227, 255, 221, 255, 255, 254, 252, 251, 245, 243, 130,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   1,   0,   2,   0,   0,   2,   2, 210, 255, 231, 203, 189, 234, 253, 255, 252, 255, 214,   0,   0, 182, 251, 251, 255, 255, 233, 182, 203, 230, 255, 236,   2,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0, 118,  28,   1,   0,   0,   0,   0,   0,   0,   0,  50, 235, 252, 255, 252, 246,   9, 188, 204,   0, 255, 254, 255, 255, 238,  61,   0,   0,   0,   0,   1,   0,   0,   0,   3, 122,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   1,   0, 250, 255,   0,   0,   0,   0,   2,   2,   3,   0, 255, 247, 255, 255, 254, 255,  30, 224, 255,  47, 255, 254, 255, 252, 249, 255,  14,   6,   2,   1,   0,   1,   3,   6, 232, 236,   0,   3,   0,   0,   0,   0},
//{   0,   0,   0,   0,   2,   0, 236, 255,  59,   0, 237, 155,   0,   0,   1,   0, 141, 191, 147, 255, 252, 255,  95, 216, 255, 115, 255, 254, 255, 171, 178, 145,   4,   3,   0,   0, 117, 255,   0,  30, 254, 215,   0,   4,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0, 111, 255, 193,   0, 253, 255,  32,   4,   0,   0,   0,  33,  47, 117, 255, 255, 225, 255, 255, 238, 254, 254, 145,  17,  45,   0,   0,   0,   0,   0, 255, 255,  11, 137, 255, 147,   1,   0,   0,   0,   0,   0},
//{   0,   0,   4,  14, 205, 126,   4, 255, 239,  14, 141, 255, 122,  11, 186, 189,   2, 255, 255, 147, 175, 254, 255, 254, 255, 255, 255, 190, 125, 255, 255,   0, 160, 209,   2, 132, 255, 189,   0, 255, 255,  42,  99, 240,  18,   0,   0,   0},
//{   0,   0,   3,   7, 230, 240,   1, 209, 255,  65,  45, 255, 255,   9, 245, 255,  21,  66, 223, 252, 255, 255, 255, 255, 255, 255, 255, 255, 253, 230,  85,  35, 247, 255,   3, 231, 255,  27,  78, 255, 255,   0, 255, 254,   0,   0,   0,   0},
//{   0,   0,   0,   3,  54, 255, 161, 140, 251, 233,  30, 255, 255, 226, 253, 255, 243, 203,  97, 206, 255, 255, 255, 255, 255, 255, 255, 251, 204, 104, 197, 238, 255, 255, 213, 255, 250,  30, 214, 255, 157, 117, 254,  69,   6,   0,   3,   0},
//{   0,   9, 190, 255, 255, 253, 255, 255, 255, 253, 255, 255, 255, 250, 255, 255, 252, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 252, 255, 255, 248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 196,  17,   1},
//{   1,   0, 210, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 236,   0,   0},
//{   0,   1,   1,  49, 102, 255, 169, 160, 252, 235,  52, 255, 254, 231, 254, 251, 255, 209,  90, 221, 255, 255, 255, 255, 255, 255, 255, 252, 220,  82, 201, 255, 255, 255, 213, 255, 244,  67, 214, 255, 173, 135, 254, 108,  59,   0,   2,   0},
//{   0,   0,   4,   8, 230, 250,   1, 209, 255,  80,  45, 255, 255,  13, 249, 255,   6,  25, 208, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 233,  41,  16, 255, 255,   0, 239, 255,  26,  90, 255, 250,   0, 255, 246,   0,   1,   0,   0},
//{   0,   0,   5,  17, 255, 157,   0, 255, 241,  15, 136, 255, 134,   4, 223, 209,   1, 237, 255, 184, 143, 254, 253, 255, 255, 254, 255, 151, 159, 255, 255,   0, 190, 238,   0, 139, 255, 172,   0, 255, 255,  32, 122, 255,  14,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0, 100, 255, 199,   0, 248, 253,  36,   5,   0,   0,   0,  61,  73,  81, 255, 255, 227, 254, 255, 238, 252, 255,  98,  47,  76,   0,   0,   0,   1,   0, 255, 255,   6, 146, 255, 141,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0, 231, 255,  70,   0, 228, 206,   0,   0,   0,   0,  87, 167, 114, 255, 254, 255, 106, 218, 255, 125, 255, 255, 255, 142, 157,  94,   0,   1,   0,   0, 149, 255,   5,  32, 255, 209,   0,   2,   0,   0,   0,   0},
//{   0,   0,   0,   0,   1,   0, 253, 255,   0,   0,  24,   0,   3,   3,   3,   1, 255, 255, 255, 254, 255, 255,  35, 212, 250,  49, 255, 254, 253, 255, 255, 255,  14,   6,   3,   2,   0,  36,   0,   8, 246, 227,   0,   3,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0, 135,  51,   4,   0,   3,   0,   0,  16,   0,   0,  98, 241, 253, 255, 252, 249,   1, 206, 213,   0, 255, 254, 255, 255, 241, 105,   0,   0,  13,   0,   0,   5,   0,   0,  29, 147,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   2, 212, 242, 239, 229, 198, 239, 253, 255, 253, 255, 218,   0,   0, 180, 252, 253, 255, 255, 239, 193, 227, 239, 244, 229,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   1,   0,   1,   4,   3,   4, 137, 239, 255, 255, 255, 255, 255, 255, 214, 255, 255,   0,   1, 244, 255, 209, 255, 255, 255, 255, 255, 255, 245, 149,   0,   5,   3,   1,   0,   1,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   2,  28,  44,  12,   2,   0,   0,  15, 232, 255, 254, 253, 108,  54,  25,   1,   0,  16,  79,  91, 255, 255, 251, 229,  36,   0,   0,   3,  10,  29,  38,   5,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   5,  31, 255, 255, 243, 223, 201, 156, 125, 246, 255, 255, 255, 255,  18,   0,   0,   0,   7,  10, 255, 254, 255, 252, 249, 122, 153, 199, 222, 241, 255, 255,  39,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0, 103, 199, 231, 255, 255, 255, 255, 253, 255,  66, 153, 255, 241,   0,   4,   0,   0, 219, 255, 169,  21, 255, 253, 255, 255, 255, 255, 233, 199,  98,   0,   1,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   8,  73, 193, 255, 255, 254, 147,   0, 198, 255, 157,   0,   0, 150, 252, 235,   0, 101, 255, 255, 253, 202,  83,  11,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 173, 171, 151, 200, 255, 255, 255, 255,  62,   9, 207, 162,   0,   0, 151, 195,  22,  52, 255, 255, 255, 253, 208, 153, 169, 163,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  55, 241, 240, 239, 252, 255, 153, 138, 255, 255,  35,   0,   0,   1,   0,   0,   0,   9, 255, 255, 163,  83, 255, 253, 243, 239, 255,  47,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0, 213, 255, 252, 241,   5, 161, 252, 250,   0,   1,   0,   0,   5,   4, 233, 254, 200,   0, 243, 255, 250, 232,  15,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3, 105, 255, 255, 150, 255, 159,   0, 197, 252, 231,   0,   2,   0,   0, 209, 252, 215,   0, 160, 255, 110, 255, 255, 103,   5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  92, 255, 210,   0, 234, 230,   0,   0, 206, 241,  17,   4,   0,   0, 255, 240,   0,   1, 199, 218,   4, 169, 255,  83,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,  57,   0,   4,   8,  27,   0,   2,   0,   6,   3,   0,   0,   0,  11,   0,   3,   0,  33,  18,   0,   0,  48,  16,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   5,   1,   0,   2,   3,   0,   0,   0,   2,   0,   0,   0,   0,   2,   0,   0,   0,   3,   2,   0,   1,   5,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
//{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0}
//};

//
//const byte interference[48][48] PROGMEM = {
//{0x00, 0xff, 0x00, 0x00, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x00, 0x22, 0xff, 0xff, 0x00, 0x00, 0x82, 0xff, 0xff, 0xe3, 0x51, 0x00, 0x00, 0x09, 0x03, 0x03, 0x09, 0x00, 0x00, 0x56, 0xd7, 0xff, 0xff, 0x91, 0x00, 0x00, 0xdf, 0xff, 0x37, 0x00, 0xea, 0xff, 0x00, 0x00, 0xff, 0x13, 0x00, 0xff, 0x00},
//{0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x77, 0x00, 0xff, 0xff, 0x00, 0x00, 0x8c, 0xff, 0xff, 0x10, 0x00, 0x00, 0x4b, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcb, 0x55, 0x00, 0x00, 0x11, 0xfd, 0xff, 0xc5, 0x00, 0x00, 0xff, 0xff, 0x00, 0x44, 0xff, 0x00, 0x00, 0xff, 0x12, 0x00, 0xff},
//{0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x50, 0xff, 0xe9, 0x00, 0x00, 0x9f, 0xff, 0xff, 0xca, 0x79, 0x1a, 0x25, 0x28, 0x28, 0x2a, 0x11, 0x6e, 0xc1, 0xff, 0xff, 0xa8, 0x00, 0x00, 0xd6, 0xff, 0x8b, 0x00, 0xa3, 0xff, 0x00, 0x00, 0xff, 0x2c, 0x00, 0xff, 0x1a, 0x00},
//{0x00, 0xff, 0x00, 0x1b, 0xff, 0x00, 0x14, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x00, 0x00, 0x2d, 0x7d, 0xc8, 0xe6, 0xd8, 0xd8, 0xe5, 0xca, 0x82, 0x28, 0x00, 0x00, 0x97, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0x57, 0x00, 0xff, 0x41, 0x00, 0xff, 0x19},
//{0xff, 0x00, 0x06, 0xff, 0x00, 0x7f, 0xff, 0x00, 0x12, 0xff, 0x11, 0x00, 0xff, 0xff, 0x1d, 0x00, 0x1e, 0xf5, 0xff, 0xff, 0x91, 0x4a, 0x10, 0x25, 0x25, 0x12, 0x41, 0x8f, 0xfd, 0xff, 0xff, 0x3c, 0x00, 0x1c, 0xff, 0xff, 0x00, 0x00, 0xff, 0x5f, 0x00, 0xff, 0xc4, 0x00, 0xff, 0x2e, 0x00, 0xff},
//{0x0f, 0x00, 0xff, 0x00, 0x7c, 0xff, 0x00, 0xbe, 0xff, 0x00, 0x00, 0xff, 0x7d, 0x00, 0x73, 0xff, 0xff, 0x1e, 0x00, 0x00, 0x57, 0xc7, 0xfb, 0xd1, 0xd6, 0xf5, 0xc9, 0x5e, 0x00, 0x00, 0x00, 0xfb, 0xff, 0x7f, 0x00, 0x42, 0xff, 0x3b, 0x00, 0xff, 0xe8, 0x00, 0xff, 0xc6, 0x00, 0xff, 0x00, 0x00},
//{0x00, 0xff, 0x00, 0x17, 0xff, 0x00, 0xe1, 0xff, 0x00, 0xd7, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xba, 0xff, 0xff, 0xb5, 0x61, 0x1a, 0x1e, 0x25, 0x10, 0x53, 0xb6, 0xff, 0xff, 0xcf, 0x00, 0x00, 0xeb, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xe7, 0x00, 0xff, 0x6c, 0x00, 0xff, 0x00},
//{0xff, 0x68, 0x00, 0xff, 0x00, 0xbe, 0xff, 0x00, 0xff, 0xff, 0x00, 0xcb, 0xff, 0x00, 0x00, 0xff, 0xff, 0x87, 0x00, 0x00, 0x44, 0x8a, 0xf3, 0xdf, 0xd8, 0xf2, 0x94, 0x4f, 0x00, 0x00, 0x6c, 0xff, 0xff, 0x00, 0x00, 0xff, 0xfc, 0x00, 0xff, 0xff, 0x00, 0xff, 0xed, 0x00, 0xff, 0x00, 0x24, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0x1d, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x7c, 0xff, 0x4d, 0x00, 0x24, 0xff, 0xff, 0xd7, 0x7d, 0x47, 0x1d, 0x17, 0x2d, 0x7f, 0xd5, 0xff, 0xff, 0x53, 0x00, 0x21, 0xff, 0xc1, 0x00, 0xff, 0xff, 0x00, 0xe6, 0xff, 0x00, 0xff, 0x79, 0x00, 0xff, 0x00, 0xfb},
//{0x00, 0xff, 0xe3, 0x00, 0xff, 0x00, 0xd8, 0xff, 0x00, 0xff, 0xdb, 0x00, 0xff, 0xff, 0x00, 0x0b, 0xff, 0xff, 0x00, 0x00, 0x00, 0x73, 0xac, 0xec, 0xef, 0xc1, 0x7a, 0x01, 0x00, 0x00, 0xf3, 0xff, 0x2f, 0x00, 0xff, 0xff, 0x00, 0x82, 0xff, 0x00, 0xfe, 0xff, 0x00, 0xff, 0x00, 0x87, 0xff, 0x00},
//{0x00, 0xff, 0x00, 0xff, 0x0f, 0x00, 0xff, 0x00, 0xff, 0xda, 0x00, 0xff, 0x95, 0x00, 0xff, 0xff, 0x00, 0x00, 0xc5, 0xff, 0xff, 0x9b, 0x39, 0x06, 0x0c, 0x38, 0x93, 0xf9, 0xff, 0xda, 0x00, 0x00, 0xff, 0xff, 0x00, 0x69, 0xff, 0x00, 0x74, 0xff, 0x00, 0xff, 0x64, 0x00, 0xff, 0x00, 0xff, 0x39},
//{0xff, 0x00, 0x52, 0xff, 0x00, 0xff, 0x00, 0xc7, 0xff, 0x00, 0xff, 0x47, 0x00, 0xff, 0x9e, 0x00, 0xd5, 0xff, 0x97, 0x00, 0x00, 0x4e, 0x9d, 0xe9, 0xf2, 0xa0, 0x5c, 0x00, 0x00, 0x71, 0xff, 0xff, 0x00, 0x64, 0xff, 0x00, 0x22, 0xff, 0x00, 0xef, 0xff, 0x00, 0xff, 0x00, 0xff, 0xb7, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x77, 0x00, 0xff, 0x00, 0xff, 0x96, 0x00, 0xff, 0x16, 0x00, 0xff, 0xe9, 0x00, 0x17, 0xff, 0xff, 0xb7, 0x75, 0x11, 0x07, 0x76, 0xbe, 0xff, 0xff, 0x11, 0x00, 0xbf, 0xff, 0x00, 0x00, 0xff, 0x00, 0x49, 0xff, 0x00, 0xff, 0x1c, 0x44, 0xff, 0x00, 0xff, 0x00, 0xec},
//{0x00, 0x9f, 0xe9, 0x00, 0xff, 0x00, 0xff, 0x00, 0x77, 0xff, 0x00, 0xff, 0x1e, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x24, 0x83, 0xc7, 0xcf, 0x83, 0x29, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0xd0, 0x00, 0xff, 0x00, 0xff, 0x00, 0x82, 0xff, 0x00},
//{0x00, 0xff, 0x00, 0xff, 0x16, 0x7b, 0xff, 0x00, 0xff, 0x00, 0xff, 0xa1, 0x00, 0xff, 0x00, 0x00, 0xff, 0x16, 0x00, 0xdc, 0xff, 0xff, 0x88, 0x36, 0x39, 0x84, 0xf0, 0xff, 0xdf, 0x00, 0x00, 0xff, 0x12, 0x00, 0xff, 0x00, 0x52, 0xff, 0x00, 0xff, 0x00, 0xdf, 0xa2, 0x00, 0xff, 0x00, 0xff, 0x00},
//{0x89, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x52, 0x04, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xb9, 0x00, 0x00, 0x7d, 0xa0, 0xa0, 0x7c, 0x00, 0x00, 0x94, 0xff, 0x29, 0x00, 0xff, 0x25, 0x00, 0xff, 0x00, 0xff, 0x4d, 0x1a, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xe1, 0xc8},
//{0xff, 0x00, 0x94, 0xa3, 0x23, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xcd, 0xe7, 0x00, 0xff, 0x00, 0x62, 0xff, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x75, 0x75, 0x9a, 0xff, 0xff, 0x00, 0x00, 0xff, 0xa7, 0x00, 0xff, 0x00, 0x93, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xf6, 0x59, 0x64, 0xe1, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x10, 0xbc, 0x82, 0x2a, 0xff, 0x00, 0xff, 0x00, 0xff, 0x13, 0x00, 0xff, 0x00, 0x9b, 0xff, 0x00, 0x00, 0x37, 0x87, 0x85, 0x49, 0x00, 0x00, 0xff, 0xd2, 0x00, 0xff, 0x4e, 0x00, 0xff, 0x00, 0xff, 0x00, 0xe8, 0x64, 0x44, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xed, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xc4, 0x8e, 0x24, 0xff, 0x00, 0xff, 0x00, 0xa1, 0xff, 0x00, 0x5d, 0xff, 0xf1, 0x73, 0x76, 0xd5, 0xff, 0xab, 0x00, 0xff, 0xc5, 0x00, 0xff, 0x00, 0xff, 0x70, 0x38, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xb6},
//{0x48, 0x4d, 0xd0, 0x30, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xe4, 0xad, 0x00, 0xff, 0x00, 0xe4, 0xff, 0x00, 0x00, 0x8d, 0x8d, 0x08, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0x7d, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x05, 0xdf, 0x47, 0xb3, 0x68, 0x2a},
//{0x00, 0xcb, 0x77, 0x7b, 0x9c, 0x44, 0xbd, 0x47, 0xd6, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x65, 0xff, 0x00, 0xff, 0xff, 0x7d, 0x75, 0xff, 0xff, 0x00, 0xff, 0xaa, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x34, 0xa6, 0x51, 0x9b, 0xa0, 0x68, 0xb0, 0x25, 0xff, 0x00},
//{0x00, 0xff, 0x12, 0xca, 0x3e, 0xd7, 0x51, 0x99, 0x7e, 0x68, 0xac, 0x53, 0xbd, 0x2b, 0xf5, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x67, 0x75, 0x00, 0xd7, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xca, 0x49, 0xb8, 0x79, 0x5d, 0xa8, 0x48, 0xdb, 0x27, 0xfb, 0x16, 0xe4, 0x23, 0xff, 0x00},
//{0x09, 0xff, 0x25, 0xe9, 0x0d, 0xfb, 0x12, 0xff, 0x41, 0xb8, 0x27, 0xa8, 0x6e, 0x82, 0x8a, 0x7a, 0x99, 0x3d, 0xef, 0x00, 0xff, 0x00, 0x50, 0xff, 0xff, 0x50, 0x00, 0xff, 0x07, 0xc1, 0x55, 0x8f, 0x97, 0x3d, 0xbc, 0x1e, 0xe7, 0x05, 0xe8, 0x15, 0xf5, 0x13, 0xd3, 0x37, 0xdb, 0x0f, 0xff, 0x07},
//{0x01, 0xff, 0x28, 0xd8, 0x28, 0xd1, 0x20, 0xd9, 0x1a, 0xf2, 0x03, 0xe6, 0x0a, 0xc8, 0x36, 0xa1, 0x6c, 0x99, 0x6b, 0x9d, 0x66, 0x6e, 0xff, 0x00, 0x00, 0xff, 0x8b, 0x40, 0xdf, 0x21, 0xfc, 0x24, 0xe4, 0x08, 0xee, 0x10, 0xe7, 0x27, 0xdd, 0x27, 0xd3, 0x29, 0xe9, 0x00, 0xff, 0x00, 0xff, 0x33},
//{0x01, 0xff, 0x28, 0xd8, 0x28, 0xd3, 0x25, 0xd4, 0x15, 0xf2, 0x08, 0xfa, 0x02, 0xd1, 0x38, 0xa4, 0x6a, 0x96, 0x67, 0x98, 0x6e, 0x77, 0xfe, 0x00, 0x00, 0xf7, 0x92, 0x48, 0xe7, 0x26, 0xfd, 0x1d, 0xe4, 0x03, 0xf3, 0x1d, 0xe4, 0x29, 0xd6, 0x27, 0xd6, 0x27, 0xec, 0x00, 0xff, 0x00, 0xff, 0x36},
//{0x09, 0xff, 0x2d, 0xe8, 0x0f, 0xfa, 0x0e, 0xf6, 0x39, 0xc6, 0x22, 0xab, 0x67, 0x85, 0x86, 0x79, 0x99, 0x5e, 0xc0, 0x00, 0xff, 0x00, 0x50, 0xf9, 0xee, 0x50, 0x00, 0xff, 0x04, 0xa8, 0x74, 0x84, 0x9c, 0x32, 0xc9, 0x0c, 0xeb, 0x09, 0xf1, 0x0f, 0xee, 0x1d, 0xd7, 0x3a, 0xde, 0x00, 0xff, 0x0f},
//{0x00, 0xff, 0x08, 0xc6, 0x3c, 0xda, 0x43, 0xa3, 0x7e, 0x6e, 0xa7, 0x57, 0xbc, 0x2b, 0xea, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xd4, 0x00, 0x7b, 0x81, 0x00, 0x9d, 0xff, 0x00, 0xff, 0x00, 0xff, 0x02, 0xd6, 0x54, 0x90, 0x7a, 0x5e, 0xbc, 0x46, 0xdd, 0x0c, 0xf4, 0x16, 0xeb, 0x29, 0xff, 0x00},
//{0x00, 0xdb, 0x65, 0x7e, 0x9a, 0x4a, 0xc1, 0x4f, 0xcb, 0x05, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xab, 0xff, 0x00, 0xff, 0xff, 0x55, 0x5a, 0xff, 0xff, 0x00, 0xff, 0xf2, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xf8, 0x38, 0x9b, 0x59, 0x8e, 0x94, 0x5b, 0xc0, 0x2a, 0xff, 0x00},
//{0x54, 0x54, 0xc4, 0x27, 0xfa, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xe7, 0x86, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x17, 0xce, 0xcd, 0x0c, 0x00, 0xff, 0xff, 0x00, 0xff, 0x16, 0x38, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x18, 0xcc, 0x54, 0xae, 0x8a, 0x02},
//{0xe0, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xee, 0x67, 0x0c, 0xff, 0x00, 0xff, 0x00, 0xc7, 0xff, 0x00, 0xb3, 0xff, 0xc2, 0x39, 0x38, 0xab, 0xff, 0xf8, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0xf9, 0x80, 0x25, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x97},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xcf, 0x6d, 0x62, 0xf6, 0x00, 0xff, 0x00, 0xff, 0x03, 0x28, 0xff, 0x00, 0xcd, 0xff, 0x00, 0x00, 0x53, 0xe5, 0xe3, 0x73, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x63, 0x00, 0xff, 0x00, 0xff, 0x00, 0xe2, 0x7f, 0x3d, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x06, 0x9a, 0x94, 0x47, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xbf, 0x00, 0xff, 0x00, 0xaa, 0xff, 0x00, 0x00, 0xff, 0xff, 0x86, 0x37, 0x2c, 0x7c, 0xff, 0xff, 0x11, 0x00, 0xff, 0xd9, 0x00, 0xff, 0x00, 0x5c, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xc8, 0x72, 0x6a, 0xd3, 0x00, 0xff},
//{0x9f, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x26, 0x36, 0xff, 0x00, 0xff, 0x00, 0x13, 0xff, 0x00, 0x45, 0xff, 0x7a, 0x00, 0x0b, 0x8c, 0xd3, 0xdf, 0x91, 0x0a, 0x00, 0x2b, 0xff, 0x66, 0x00, 0xff, 0x75, 0x00, 0xff, 0x00, 0xff, 0x78, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xc3, 0xda},
//{0x00, 0xff, 0x00, 0xff, 0x12, 0x84, 0xf0, 0x00, 0xff, 0x00, 0xff, 0x60, 0x00, 0xff, 0x00, 0x21, 0xff, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x54, 0x08, 0x04, 0x4c, 0xcb, 0xff, 0xff, 0x00, 0x00, 0xff, 0x70, 0x00, 0xff, 0x00, 0x1c, 0xff, 0x00, 0xff, 0x00, 0xb0, 0xe2, 0x00, 0xff, 0x00, 0xff, 0x00},
//{0x00, 0xd4, 0xe2, 0x00, 0xff, 0x00, 0xff, 0x00, 0xc4, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x4a, 0xab, 0xe8, 0xf6, 0xc5, 0x51, 0x00, 0x00, 0xee, 0xff, 0x00, 0x00, 0xff, 0x16, 0x00, 0xff, 0x00, 0xe6, 0xff, 0x00, 0xff, 0x00, 0xff, 0x16, 0x7c, 0xff, 0x00},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x44, 0x00, 0xff, 0x00, 0xff, 0x5d, 0x00, 0xff, 0x00, 0x00, 0xff, 0x91, 0x00, 0x63, 0xff, 0xff, 0xad, 0x2e, 0x10, 0x1b, 0x1d, 0x91, 0xff, 0xff, 0x74, 0x00, 0x5b, 0xff, 0x00, 0x00, 0xff, 0x00, 0x22, 0xff, 0x00, 0xff, 0x21, 0x0c, 0xff, 0x00, 0xff, 0x00, 0xf2},
//{0xff, 0x00, 0x8c, 0xff, 0x00, 0xff, 0x00, 0xf7, 0xff, 0x00, 0xff, 0x21, 0x00, 0xff, 0x56, 0x00, 0xff, 0xff, 0x3a, 0x00, 0x00, 0x7e, 0xd9, 0xe8, 0xe2, 0xde, 0x7d, 0x00, 0x00, 0x32, 0xff, 0xff, 0x00, 0x0e, 0xff, 0x00, 0x01, 0xff, 0x00, 0xc8, 0xff, 0x00, 0xff, 0x00, 0xd2, 0xd2, 0x00, 0xff},
//{0x1a, 0xff, 0x00, 0xff, 0x00, 0x38, 0xff, 0x00, 0xff, 0x82, 0x00, 0xff, 0x4c, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x68, 0x0d, 0x27, 0x27, 0x11, 0x63, 0xe1, 0xff, 0xfd, 0x00, 0x00, 0xff, 0xff, 0x00, 0x1a, 0xff, 0x00, 0x3b, 0xff, 0x00, 0xff, 0x8e, 0x00, 0xff, 0x00, 0xff, 0x63},
//{0x00, 0xff, 0x9a, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0x77, 0x00, 0xff, 0xff, 0x00, 0x4a, 0xff, 0xed, 0x00, 0x00, 0x2f, 0x9a, 0xe5, 0xdd, 0xda, 0xea, 0xa5, 0x3c, 0x00, 0x00, 0xe9, 0xff, 0x71, 0x00, 0xda, 0xff, 0x00, 0x3e, 0xff, 0x00, 0xd9, 0xff, 0x00, 0xff, 0x00, 0x4c, 0xff, 0x00},
//{0xff, 0x00, 0xff, 0x00, 0x5d, 0xff, 0x00, 0xff, 0xe4, 0x00, 0xff, 0xf9, 0x00, 0xd7, 0xff, 0x23, 0x00, 0x5a, 0xff, 0xff, 0xac, 0x57, 0x1a, 0x22, 0x27, 0x14, 0x48, 0xa0, 0xff, 0xff, 0x77, 0x00, 0x00, 0xff, 0xff, 0x00, 0xc2, 0xff, 0x00, 0xc1, 0xff, 0x00, 0xff, 0xab, 0x00, 0xff, 0x00, 0xc7},
//{0xff, 0x3d, 0x00, 0xff, 0x00, 0xe6, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x5f, 0xce, 0xf2, 0xd6, 0xd6, 0xeb, 0xcf, 0x64, 0x00, 0x00, 0x35, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0xdd, 0xff, 0x00, 0xfa, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff},
//{0x00, 0xff, 0x00, 0x5c, 0xff, 0x00, 0xe8, 0xff, 0x00, 0xff, 0xff, 0x00, 0x12, 0xff, 0xe3, 0x00, 0x00, 0xf4, 0xff, 0xff, 0x90, 0x2c, 0x16, 0x27, 0x27, 0x1a, 0x1b, 0x8c, 0xff, 0xff, 0xff, 0x00, 0x00, 0xb1, 0xff, 0x2c, 0x00, 0xff, 0xff, 0x00, 0xfd, 0xff, 0x00, 0xff, 0xad, 0x00, 0xff, 0x00},
//{0x00, 0x00, 0xff, 0x00, 0xc4, 0xff, 0x00, 0xf3, 0xff, 0x00, 0x5d, 0xff, 0x30, 0x00, 0xab, 0xff, 0xee, 0x0d, 0x00, 0x18, 0x8d, 0xf5, 0xd6, 0xe9, 0xe9, 0xd7, 0xec, 0x92, 0x22, 0x00, 0x00, 0xcc, 0xff, 0xe1, 0x00, 0x06, 0xff, 0x92, 0x00, 0xff, 0xff, 0x00, 0xff, 0xdf, 0x00, 0xff, 0x26, 0x00},
//{0xff, 0x00, 0x2e, 0xff, 0x00, 0xc7, 0xff, 0x00, 0x74, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x4e, 0xff, 0xff, 0xd3, 0x68, 0x1b, 0x34, 0x00, 0x00, 0x39, 0x1b, 0x63, 0xcf, 0xff, 0xff, 0x6b, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xa9, 0x00, 0xff, 0xe1, 0x00, 0xff, 0x6d, 0x00, 0xff},
//{0x05, 0xff, 0x00, 0x3e, 0xff, 0x00, 0x68, 0xff, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x0a, 0xff, 0xff, 0x5e, 0x00, 0x00, 0x49, 0xa8, 0xe1, 0xde, 0xff, 0xff, 0xe0, 0xe5, 0xad, 0x58, 0x00, 0x00, 0x60, 0xff, 0xff, 0x1a, 0x00, 0xd7, 0xff, 0x00, 0x00, 0xff, 0xa4, 0x00, 0xff, 0xab, 0x00, 0xff, 0x52},
//{0x00, 0x1a, 0xff, 0x00, 0x2c, 0xff, 0x00, 0x00, 0xff, 0x8b, 0x00, 0xb9, 0xff, 0x8b, 0x00, 0x00, 0xd3, 0xff, 0xff, 0xa1, 0x33, 0x21, 0x11, 0x00, 0x00, 0x00, 0x26, 0x38, 0xa0, 0xff, 0xff, 0xd9, 0x00, 0x00, 0x80, 0xff, 0xd9, 0x00, 0x4a, 0xff, 0x00, 0x00, 0xff, 0x6c, 0x00, 0xff, 0x39, 0x00},
//{0xff, 0x00, 0x15, 0xff, 0x00, 0x00, 0xff, 0x2d, 0x00, 0xff, 0xff, 0x00, 0x00, 0xfa, 0xff, 0xde, 0x00, 0x00, 0x00, 0x71, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x00, 0x00, 0x00, 0xc6, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0x0f, 0x00, 0xff, 0x30, 0x00, 0xff},
//{0x00, 0xff, 0x00, 0x1b, 0xff, 0x00, 0x00, 0xff, 0xdc, 0x00, 0x47, 0xff, 0xcf, 0x00, 0x00, 0xb6, 0xff, 0xff, 0xb3, 0x32, 0x00, 0x00, 0x06, 0x30, 0x36, 0x0f, 0x00, 0x00, 0x15, 0x93, 0xff, 0xff, 0xbd, 0x00, 0x00, 0xcd, 0xff, 0x6f, 0x00, 0xbd, 0xff, 0x00, 0x00, 0xff, 0x40, 0x00, 0xff, 0x79}
//};


//const byte squares[48][48] PROGMEM = {
//{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
//{0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff},
//{0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
//{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
//};
//
//const byte smiley[48][48] PROGMEM = {
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00},
//{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00}
//};
//
//const byte starfield[48][48] PROGMEM = {
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
//{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
//};

const byte dotfield[48][48] PROGMEM = {
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
};


const int g17[] = {1,  2,  3,  9, 11, 12, 13, 15, 19, 20, 22, 23, 28, 31, 33, 34, 38, 41, 47, 49, 53, 56, 59, 60, 61, 63, 65};
const int jn2[] = {0,  1,  2,  3, 11, 12, 15, 18, 21, 22, 23, 26, 33, 36, 37, 41, 47, 50, 51, 54, 57, 58, 59, 64, 65, 66, 67};



// Scroll grayscale frame with overprinted Junction2 logo
void jn2Logo() {

  static float spinIndex = 0;
  const byte imgWidth = 48;
  const byte imgHeight = 48;
  const byte orbitRadiusX = (imgWidth-16)/2; // = 48-16 / 2 = 16
  const byte orbitRadiusY = (imgHeight-5)/2; // = 48-5 / 2

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 1;
  }

  float offsetX = orbitRadiusX*sin(spinIndex)+imgWidth/2-8;
  float offsetY = orbitRadiusY*cos(spinIndex)+imgHeight/2-3;

  spinIndex += 0.007;
  int tempX; int tempY;
  
  for (byte y = 0; y < 5; y++) {
    for (byte x = 0; x < 16; x++) {
      tempX = x+offsetX;
      tempY = y+offsetY;
      if (tempX >=0 && tempX < imgWidth && tempY >= 0 && tempY < imgHeight) {
        leds[XY(x, y)] = CHSV(cycleHue, 50, pgm_read_byte(&(dotfield[tempY][tempX]))/2);
      } else {
        leds[XY(x, y)] = CHSV(cycleHue, 255, 0);
      }
    }
  }
  for (int i = 0; i < 27; i++) {
    leds[jn2[i]] = CHSV(cycleHue, 255, 255);
  }
}

// Scroll grayscale frame with overprinted glastonbury 2017 logo

void g17Logo() {
  static float spinIndex = 0;
  const byte imgWidth = 48;
  const byte imgHeight = 48;
  const byte orbitRadiusX = (imgWidth-16)/2; // = 48-16 / 2 = 16
  const byte orbitRadiusY = (imgHeight-5)/2; // = 48-5 / 2

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 1;
  }

  float offsetX = orbitRadiusX*sin(spinIndex)+imgWidth/2-8;
  float offsetY = orbitRadiusY*cos(spinIndex)+imgHeight/2-3;

  spinIndex += 0.007;
  int tempX; int tempY;
  
  for (byte y = 0; y < 5; y++) {
    for (byte x = 0; x < 16; x++) {
      tempX = x+offsetX;
      tempY = y+offsetY;
      if (tempX >=0 && tempX < imgWidth && tempY >= 0 && tempY < imgHeight) {
        leds[XY(x, y)] = CHSV(cycleHue, 50, pgm_read_byte(&(dotfield[tempY][tempX]))/2);
      } else {
        leds[XY(x, y)] = CHSV(cycleHue, 255, 0);
      }
    }
  }
  for (int i = 0; i < 27; i++) {
    leds[g17[i]] = CHSV(cycleHue, 255, 255);
  }
}



// Pixel layout
//
//      0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
//   +------------------------------------------------
// 0 |  .  0  1  2  3  4  5  6  7  8  9 10 11 12 13  .
// 1 | 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14
// 2 | 30 31 32 33 34 35 36  .  . 37 38 39 40 41 42 43
// 3 | 57 56 55 54 53 52 51  .  . 50 49 48 47 46 45 44
// 4 |  . 58 59 60 61 62  .  .  .  . 63 64 65 66 67  .


const int leftEyePosX[] = {1,  2,  3,  4,  5,  5,  4,  3,  2,  1,  0,  0};
const int leftEyePosY[] = {0,  0,  0,  0,  1,  2,  3,  3,  3,  3,  2,  1};

// RGB Plasma
void rollingEyes() {

  static byte leftEyePos;
  static byte rightEyePos;
  static byte leftEyeHue;
  static byte rightEyeHue;

  // startup tasks
  if (effectInit == false) {
    effectInit = true;
    effectDelay = 30;
    fadingActive = true;
    leftEyePos = random8(12);
    rightEyePos = random8(12);
    leftEyeHue = random8(255);
    rightEyeHue = random8(255);
  }

  //fadeAll(10);
  for (int i = 0; i < LAST_VISIBLE_LED + 1; i++) leds[i] = CHSV(leftEyeHue, 255, 0); // blank all LEDs
  leds[XY(leftEyePosX[leftEyePos], leftEyePosY[leftEyePos])] = CHSV(leftEyeHue, 255, 255); // draw eye
  leds[XY(leftEyePosX[leftEyePos]+1, leftEyePosY[leftEyePos])] = CHSV(leftEyeHue, 255, 255); // draw eye
  leds[XY(leftEyePosX[leftEyePos]+1, leftEyePosY[leftEyePos]+1)] = CHSV(leftEyeHue, 255, 255); // draw eye
  leds[XY(leftEyePosX[leftEyePos], leftEyePosY[leftEyePos]+1)] = CHSV(leftEyeHue, 255, 255); // draw eye
  
  leds[XY(leftEyePosX[rightEyePos]+9, leftEyePosY[rightEyePos])] = CHSV(rightEyeHue, 255, 255); // draw eye
  leds[XY(leftEyePosX[rightEyePos]+10, leftEyePosY[rightEyePos])] = CHSV(rightEyeHue, 255, 255); // draw eye
  leds[XY(leftEyePosX[rightEyePos]+10, leftEyePosY[rightEyePos]+1)] = CHSV(rightEyeHue, 255, 255); // draw eye
  leds[XY(leftEyePosX[rightEyePos]+9, leftEyePosY[rightEyePos]+1)] = CHSV(rightEyeHue, 255, 255); // draw eye

  if (++leftEyePos >= 12) leftEyePos = 0; 
  if (++rightEyePos >= 12) rightEyePos = 0; 
  leftEyeHue++;
  rightEyeHue--;
}


